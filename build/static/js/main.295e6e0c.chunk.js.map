{"version":3,"sources":["components/Filter/Filter.module.css","components/Container/Container.module.css","components/ContactForm/ContactForm.module.css","components/Container/Container.jsx","redux/action.js","redux/selector.js","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","components/ContactForm/ContactForm.jsx","App.js","redux/reducers.js","redux/store.js","index.js","components/ContactList/ContactList.module.css"],"names":["module","exports","Container","title","children","className","s","actions","changeFilter","createAction","deleteContact","addContact","name","number","payload","id","shortid","generate","getContacts","state","items","getFilter","filter","getVisibleContacts","contacts","normalizedFilter","toLowerCase","includes","ContactList","dispatch","useDispatch","visibleContact","useSelector","list","map","elem","button","type","onClick","action","Filter","input","value","onChange","event","target","placeholder","ContactForm","useState","setName","setNumber","handleChange","onSubmit","e","preventDefault","find","contact","alert","pattern","required","App","createReducer","_","combineReducers","persistConfig","key","storage","blacklist","store","configureStore","reducer","persistReducer","phonebookReducer","devTools","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","persistStore","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.295e6e0c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"elem\":\"Filter_elem__2JT9S\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"Container_Container__KDp_U\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"elem\":\"ContactForm_elem__w6i_z\"};","import React from \"react\";\r\nimport s from \"./Container.module.css\";\r\n\r\nfunction Container({title, children}) {\r\n    return (\r\n        <div className={s.Container}>\r\n            {title && <h2>{title}</h2>}\r\n            {children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Container;","import { createAction } from \"@reduxjs/toolkit\";\r\nimport shortid from \"shortid\";\r\n\r\nconst changeFilter = createAction('phonebook/change_filter');\r\nconst deleteContact = createAction('phonebook/delete');\r\nconst addContact = createAction('phonebook/add' , (name,number)=>({\r\n    payload: {id:shortid.generate(),\r\n    name,\r\n    number,},})\r\n);\r\n\r\nconst actions = { changeFilter, deleteContact, addContact };\r\nexport default actions;","export const getContacts = state => state.items;\r\nexport const getFilter = state => state.filter;\r\n\r\nexport const getVisibleContacts = state => {\r\n  const contacts = getContacts(state);\r\n  const filter = getFilter(state);\r\n  const normalizedFilter = filter.toLowerCase();\r\n\r\n  return contacts.filter(({ name }) =>\r\n    name.toLowerCase().includes(normalizedFilter),\r\n  );\r\n};","import s from './ContactList.module.css'\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport action from '../../redux/action'\r\nimport { getVisibleContacts } from '../../redux/selector';\r\n\r\nexport default function ContactList() {\r\n  const dispatch = useDispatch();\r\n  const visibleContact = useSelector(getVisibleContacts);\r\n  return (\r\n  <ul className={s.list}>\r\n      {visibleContact.map(({id,name,number }) => (\r\n        <li className={s.elem} key={id}>\r\n          <div className={s.title}>{`${name}: ${number}`}</div>\r\n          <button\r\n            className={s.button}\r\n            type=\"button\"\r\n            onClick={() => dispatch(action.deleteContact(id))}\r\n          >\r\n            Delete\r\n          </button>\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  );\r\n}","import s from './Filter.module.css'\r\nimport { getFilter} from \"../../redux/selector\";\r\nimport { useDispatch,useSelector } from \"react-redux\";\r\nimport action from '../../redux/action'\r\n\r\nexport default function Filter() {\r\n  const filter = useSelector(getFilter);\r\n  const dispatch = useDispatch();\r\n  return (\r\n    <label className={s.elem}>\r\n      Find contacts by name\r\n      <input\r\n        type=\"text\"\r\n        name=\"filter\"\r\n        className={s.input}\r\n        value={filter}\r\n        onChange={event => dispatch(action.changeFilter(event.target.value))}\r\n        placeholder=\"Enter name \"\r\n      />\r\n    </label>\r\n  );\r\n}\r\n\r\n","import { useState } from \"react\";\r\nimport { useDispatch,useSelector } from \"react-redux\";\r\nimport s from './ContactForm.module.css';\r\nimport action from '../../redux/action'\r\nimport { getContacts } from \"../../redux/selector\";\r\n\r\nexport default function ContactForm() {\r\n    const [name, setName] = useState('');\r\n    const [number, setNumber] = useState('');\r\n    const dispatch = useDispatch()\r\n    const contacts= useSelector(getContacts)\r\n    const handleChange = event => {\r\n        const { name, value } = event.target;\r\n        switch (name) {\r\n            case 'name':\r\n                setName(value);\r\n                break;\r\n            case 'number':\r\n                setNumber(value);\r\n                break;\r\n            default:\r\n                return;\r\n        }\r\n    }\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        const duplicateContact = contacts.find(\r\n    (contact) => contact.name.toLowerCase() === name.toLowerCase()\r\n    );\r\n    if (duplicateContact) {\r\n    alert('Contact is already added !!!');\r\n    return;\r\n    }\r\n        \r\n        dispatch(action.addContact(name, number));\r\n        setName('');\r\n        setNumber('');\r\n        \r\n    };\r\n\r\n    return (\r\n        <>\r\n            <form onSubmit={handleSubmit} className={s.elem}>\r\n                <label>\r\n                <input\r\n                type=\"text\"\r\n                name=\"name\"\r\n                placeholder=\"Enter name\"\r\n                pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n                title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n                value={name}\r\n                onChange={handleChange}\r\n                required\r\n                />\r\n            </label>\r\n            <label>\r\n                <input\r\n                type=\"tel\"\r\n                name=\"number\"\r\n                value={number}\r\n                onChange={handleChange}\r\n                placeholder=\"Enter number\"\r\n                pattern=\"38[0-9]{3}[0-9]{3}[0-9]{2}[0-9]{2}\"\r\n                title=\"Номер может состоять только из цифр. Например 380956665557.\"\r\n                required\r\n                />\r\n            </label>\r\n            <button type=\"submit\">Save</button>\r\n        </form> \r\n        </>\r\n    )\r\n}","// import { useState,useEffect } from \"react\";\n// import Section from \"./components/Section\";\n// import Container from \"./components/Container\";\n// import ContactForm from \"./components/ContactForm\";\n// import ContactList from \"./components/ContactList\";\n// import Filter from \"./components/Filter\";\n// import shortid from \"shortid\";\n\n\nimport Container from './components/Container';\nimport ContactList from './components/ContactList';\nimport Filter from './components/Filter';\nimport ContactForm from './components/ContactForm';\n\n// const initialState = [\n//   { id: \"id-1\", name: \"Rosie Simpson\", number: \"380950254596\" },\n//   { id: \"id-2\", name: \"Hermione Kline\", number: \"380950254436\" },\n//   { id: \"id-3\", name: \"Eden Clements\", number: \"380950256456\" },\n//   { id: \"id-4\", name: \"Annie Copeland\", number: \"380950252276\" },\n// ];\n\n// export default function App () {\n//   const [contacts, setContacts] = useState(JSON.parse(window.localStorage.getItem('contacts')) ?? initialState);\n//   const [filter, setFilter] = useState('');\n  \n//   useEffect(() => {\n//     window.localStorage.setItem(\"contacts\", JSON.stringify(contacts));\n//   }, [contacts]);\n\n// const addContact = (name, number) => {\n//   const duplicate = contacts.some((contact) => contact.name === name);\n//     if (duplicate) {\n//       alert('Такой контакт уже существует!');\n//     } else {\n//       const contact = {\n//         name,\n//         number,\n//         id: shortid.generate(),\n//       };\n\n//       setContacts((prevState) => [contact, ...prevState]);\n//     }\n//   };\n\n//   const changeFilter = (e) => {\n//     setFilter(e.currentTarget.value);\n//   };\n\n//   const deleteContact = (e) => {\n//     setContacts((prevState) => (prevState.filter((contact) => contact.id !== e)));\n//   };\n  \n//   const visibleContact = () => {\n//     const noramalizesFilter = filter.toLowerCase();\n//     return contacts.filter((contact) =>\n//       contact.name.toLowerCase().includes(noramalizesFilter));\n//   }\n\n//   return (\n//     <Section>\n//       <Container>\n//         <ContactForm onSubmit={addContact} />\n//       </Container>\n//       <Container>\n//         <Filter value={filter} onChange={changeFilter} />\n//       </Container>\n//       <Container>\n//         <ContactList\n//           contacts={visibleContact()}\n//           deleteContact={deleteContact}\n//         />\n//       </Container>\n//     </Section>\n//   );\n// }\n\nexport default function App() {\n\n  return (\n    <>\n       <Container>\n      <ContactForm />\n      <Filter />\n        <ContactList />\n      </Container>\n    </>\n  );\n}","import { createReducer } from \"@reduxjs/toolkit\";\r\nimport actions from './action';\r\nimport { combineReducers } from \"redux\";\r\n\r\nconst items = createReducer([], {\r\n    [actions.addContact]: (state, { payload }) => [...state, payload],\r\n    [actions.deleteContact]: (state, { payload }) => state.filter((contacts) => !contacts.id.includes(payload))\r\n});\r\n\r\nconst filter = createReducer('', {\r\n    [actions.changeFilter]: (_, { payload }) => payload\r\n});\r\n\r\nexport default combineReducers({\r\n    items,\r\n    filter\r\n})","import { configureStore, getDefaultMiddleware } from \"@reduxjs/toolkit\";\r\nimport {\r\n  persistStore,\r\n  persistReducer, \r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from \"redux-persist\";\r\nimport storage from \"redux-persist/lib/storage\";\r\nimport phonebookReducer from './reducers';\r\n\r\nconst persistConfig = {\r\n    key: 'contact',\r\n    storage,\r\n    blacklist:['filter']\r\n}\r\n\r\nexport const store = configureStore({\r\n  reducer: persistReducer(persistConfig, phonebookReducer),\r\n  devTools: true,\r\n  middleware:[\r\n    ...getDefaultMiddleware({\r\n      serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n      },\r\n    })]\r\n});\r\n\r\nexport const persistor = persistStore(store);","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { Provider } from 'react-redux';\nimport { store } from './redux/store';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n    <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"elem\":\"ContactList_elem__12ta-\",\"title\":\"ContactList_title__1ZQkM\"};"],"sourceRoot":""}